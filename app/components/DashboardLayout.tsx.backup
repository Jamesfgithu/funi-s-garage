'use client';

import { useState, useEffect } from 'react';
import { ChevronDown, ChevronRight, ExternalLink, Loader2 } from 'lucide-react';
import { useAuthState } from 'react-firebase-hooks/auth';
import { auth } from '@/lib/firebase/config';
import { getUserSafelistLinks, calculateReadiness } from '@/lib/firebase/safelist';

interface DashboardLayoutProps {
  children: React.ReactNode;
}

interface SafelistLink {
  id: string;
  name: string;
  url: string;
  frequency: number;
  lastSubmitted: any;
  notes?: string;
}

export default function DashboardLayout({ children }: DashboardLayoutProps) {
  const [activeTab, setActiveTab] = useState('dashboard');
  const [user] = useAuthState(auth);
  const [safelistsExpanded, setSafelistsExpanded] = useState(false);
  const [safelists, setSafelists] = useState<SafelistLink[]>([]);
  const [loadingSafelists, setLoadingSafelists] = useState(true);

  useEffect(() => {
    async function fetchSafelists() {
      if (user) {
        setLoadingSafelists(true);
        try {
          const userLinks = await getUserSafelistLinks(user.uid);
          // Sort alphabetically by name
          const sortedLinks = userLinks.sort((a, b) => a.name.localeCompare(b.name));
          setSafelists(sortedLinks);
        } catch (error) {
          console.error('Error fetching safelists:', error);
        } finally {
          setLoadingSafelists(false);
        }
      }
    }

    fetchSafelists();
  }, [user]);

  const sidebarItems = [
    { id: 'dashboard', label: 'Dashboard', icon: 'üìä', subtitle: 'Dashboard overview' },
    { id: 'email-generator', label: 'Email Generator', icon: '‚≠ê', subtitle: 'AI-powered email creation' },
    { id: 'safelist-manager', label: 'Safelist Manager', icon: 'üõ°Ô∏è', subtitle: 'Streamline Your Links' },
    { id: 'settings', label: 'Settings', icon: '‚öôÔ∏è', subtitle: 'Account & preferences' },
  ];

  // Get current tab info for dynamic header
  const currentTab = sidebarItems.find(item => item.id === activeTab) || sidebarItems[0];

  const getStatusIndicator = (link: SafelistLink) => {
    const { status } = calculateReadiness(link.lastSubmitted, link.frequency);
    
    switch (status) {
      case 'ready':
        return <div className="w-2 h-2 bg-green-400 rounded-full animate-pulse" />;
      case 'soon':
        return <div className="w-2 h-2 bg-amber-400 rounded-full" />;
      case 'waiting':
        return <div className="w-2 h-2 bg-red-400 rounded-full" />;
      default:
        return <div className="w-2 h-2 bg-gray-500 rounded-full" />;
    }
  };

  return (
    <div className="flex h-screen bg-gray-900 text-white">
      {/* Enhanced Sidebar */}
      <div className="w-72 bg-gradient-to-b from-gray-800/95 to-gray-900/95 backdrop-blur-sm border-r border-gray-700/50 shadow-xl">
        {/* Enhanced Logo */}
        <div className="p-6 border-b border-gray-700/50">
          <div className="flex items-center space-x-3">
            <div className="w-10 h-10 bg-gradient-to-br from-yellow-400 to-yellow-500 rounded-lg flex items-center justify-center shadow-lg">
              <span className="text-black font-bold text-lg">‚≠ê</span>
            </div>
            <div>
              <h1 className="font-bold text-white text-lg bg-gradient-to-r from-white to-gray-200 bg-clip-text text-transparent">
                Safelist AI Pro
              </h1>
              <p className="text-xs text-gray-400">Version 3</p>
            </div>
          </div>
        </div>

        {/* Enhanced Navigation */}
        <nav className="p-4 space-y-2 flex-1">
          {sidebarItems.map((item) => (
            <a
              key={item.id}
              href={item.id === 'dashboard' ? '/dashboard' : item.id === 'safelist-manager' ? '/dashboard/safelist-management' : '#'}
              onClick={() => setActiveTab(item.id)}
              className={`w-full flex items-center space-x-3 px-4 py-3 rounded-lg text-left transition-all duration-200 block group ${
                item.id === activeTab
                  ? 'bg-gradient-to-r from-yellow-500 to-yellow-400 text-black font-medium shadow-lg'
                  : 'text-gray-300 hover:bg-gradient-to-r hover:from-gray-700/50 hover:to-gray-600/50 hover:text-white hover:shadow-md'
              }`}
            >
              <span className="text-xl">{item.icon}</span>
              <div className="flex-1 min-w-0">
                <div className="font-medium truncate">{item.label}</div>
                <div className={`text-xs truncate ${
                  item.id === activeTab ? 'text-black/70' : 'text-gray-500 group-hover:text-gray-400'
                }`}>
                  {item.subtitle}
                </div>
              </div>
            </a>
          ))}

          {/* My Safelists Dropdown */}
          {user && (
            <div className="mt-6">
              <button
                onClick={() => setSafelistsExpanded(!safelistsExpanded)}
                className="w-full flex items-center space-x-3 px-4 py-3 rounded-lg transition-all duration-200 group text-gray-300 hover:bg-gradient-to-r hover:from-gray-700/50 hover:to-gray-600/50 hover:text-white hover:shadow-md"
              >
                {safelistsExpanded ? (
                  <ChevronDown className="h-4 w-4 group-hover:text-white" />
                ) : (
                  <ChevronRight className="h-4 w-4 group-hover:text-white" />
                )}
                <span className="text-lg">üîó</span>
                <div className="flex-1 min-w-0">
                  <div className="font-medium truncate">My Safelists</div>
                  <div className="text-xs truncate text-gray-500 group-hover:text-gray-400">
                    Quick access to your links
                  </div>
                </div>
                {loadingSafelists && <Loader2 className="h-3 w-3 animate-spin" />}
              </button>

              {/* Safelists Dropdown Content */}
              {safelistsExpanded && (
                <div className="mt-2 ml-4 space-y-1 border-l border-gray-600/50 pl-4">
                  {loadingSafelists ? (
                    <div className="flex items-center gap-2 px-3 py-2 text-sm text-gray-400">
                      <Loader2 className="h-3 w-3 animate-spin" />
                      Loading safelists...
                    </div>
                  ) : safelists.length === 0 ? (
                    <div className="px-3 py-2 text-sm text-gray-400">
                      No safelists added yet
                    </div>
                  ) : (
                    safelists.map((safelist) => (
                      <a
                        key={safelist.id}
                        href={safelist.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="flex items-center gap-3 px-3 py-2 rounded-md transition-all duration-200 group hover:bg-gradient-to-r hover:from-gray-700/40 hover:to-gray-600/40 text-sm"
                      >
                        {getStatusIndicator(safelist)}
                        <span className="flex-1 text-gray-300 group-hover:text-white truncate">
                          {safelist.name}
                        </span>
                        <ExternalLink className="h-3 w-3 text-gray-500 group-hover:text-gray-300 opacity-0 group-hover:opacity-100 transition-opacity" />
                      </a>
                    ))
                  )}
                </div>
              )}
            </div>
          )}
        </nav>

        {/* Enhanced Footer */}
        <div className="p-4 border-t border-gray-700/50">
          <div className="text-xs text-gray-400 text-center">
            {user ? (
              <div className="space-y-1">
                <p className="font-medium text-gray-200 truncate">{user.email}</p>
                <p className="text-green-400">‚óè Connected</p>
              </div>
            ) : (
              <p className="text-red-400">‚óè Not authenticated</p>
            )}
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 flex flex-col">
        {/* Enhanced Header */}
        <header className="bg-gradient-to-r from-gray-800/95 to-gray-900/95 backdrop-blur-sm border-b border-gray-700/50 px-6 py-4 shadow-lg">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold bg-gradient-to-r from-white to-gray-200 bg-clip-text text-transparent">
                {currentTab.label}
              </h1>
              <p className="text-gray-400">{currentTab.subtitle}</p>
            </div>
            <div className="flex items-center space-x-4">
              <button className="p-2 text-gray-400 hover:text-white transition-colors">
                üîî
              </button>
              <button className="p-2 text-gray-400 hover:text-white transition-colors">
                üë§
              </button>
            </div>
          </div>
        </header>

        {/* Content Area */}
        <main className="flex-1 overflow-auto">
          {children}
        </main>
      </div>
    </div>
  );
}
